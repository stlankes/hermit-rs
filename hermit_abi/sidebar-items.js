window.SIDEBAR_ITEMS = {"constant":[["AF_INET",""],["AF_INET6",""],["CLOCK_MONOTONIC",""],["CLOCK_REALTIME",""],["EAI_FAIL",""],["EAI_FAMILY",""],["EAI_MEMORY",""],["EAI_NONAME",""],["EAI_SERVICE",""],["FIONBIO",""],["FUTEX_RELATIVE_TIMEOUT",""],["HIGH_PRIO",""],["IPPROTO_IP",""],["IPPROTO_IPV6",""],["IPPROTO_TCP",""],["IPPROTO_UDP",""],["IPV6_ADD_MEMBERSHIP",""],["IPV6_DROP_MEMBERSHIP",""],["IPV6_MULTICAST_LOOP",""],["IPV6_V6ONLY",""],["IP_ADD_MEMBERSHIP",""],["IP_DROP_MEMBERSHIP",""],["IP_MULTICAST_LOOP",""],["IP_MULTICAST_TTL",""],["IP_TTL",""],["LOW_PRIO",""],["MSG_PEEK",""],["NORMAL_PRIO",""],["NO_PRIORITIES","Maximum number of priorities"],["NSEC_PER_SEC",""],["O_APPEND",""],["O_CREAT",""],["O_EXCL",""],["O_RDONLY",""],["O_RDWR",""],["O_TRUNC",""],["O_WRONLY",""],["POLLERR",""],["POLLHUP",""],["POLLIN",""],["POLLNVAL",""],["POLLOUT",""],["POLLPRI",""],["POLLRDBAND",""],["POLLRDHUP",""],["POLLRDNORM",""],["RAND_MAX","The largest number `rand` will return"],["SHUT_RD",""],["SHUT_RDWR",""],["SHUT_WR",""],["SOCK_DGRAM",""],["SOCK_STREAM",""],["SOL_SOCKET",""],["SO_BROADCAST",""],["SO_ERROR",""],["SO_LINGER",""],["SO_RCVTIMEO",""],["SO_REUSEADDR",""],["SO_SNDTIMEO",""],["STDERR_FILENO",""],["STDIN_FILENO",""],["STDOUT_FILENO",""],["TCP_NODELAY",""]],"enum":[["IpAddress","An internetworking address."],["Version","Internet protocol version."]],"fn":[["abort","cause abnormal termination"],["accept",""],["bind","bind a name to a socket"],["block_current_task","Add current task to the queue of blocked tasks. After calling `block_current_task`, call `yield_now` to switch to another task."],["block_current_task_with_timeout","Add current task to the queue of blocked tasks, but wake it when `timeout` milliseconds have elapsed."],["clock_gettime","get current time"],["close","close a file descriptor"],["connect",""],["dup","duplicate an existing file descriptor"],["exit","cause normal termination and return `arg` to the host system"],["freeaddrinfo",""],["futex_wait","If the value at address matches the expected value, park the current thread until it is either woken up with [`futex_wake`] (returns 0) or an optional timeout elapses (returns -ETIMEDOUT)."],["futex_wake","Wake `count` threads waiting on the futex at `address`. Returns the number of threads woken up (saturates to `i32::MAX`). If `count` is `i32::MAX`, wake up all matching waiting threads. If `count` is negative or `address` is null, returns -EINVAL."],["get_priority","Determine the priority of the current thread"],["get_processor_count","determines the number of activated processors"],["getaddrinfo",""],["getpeername",""],["getpid","Determines the id of the current thread"],["getsockname",""],["getsockopt",""],["ioctl",""],["isatty","returns true if file descriptor `fd` is a tty"],["join","join with a terminated thread"],["listen","listen for connections on a socket"],["malloc",""],["network_init","initialize the network stack"],["notify",""],["open","open and possibly create a file"],["poll",""],["read","read from a file descriptor"],["read_entropy","Fill `len` bytes in `buf` with cryptographically secure random data."],["recv","receive() a message from a socket"],["recvfrom","receive() a message from a socket"],["sem_destroy","sem_destroy() frees the unnamed semaphore at the address pointed to by `sem`."],["sem_init","sem_init() initializes the unnamed semaphore at the address pointed to by `sem`.  The `value` argument specifies the initial value for the semaphore."],["sem_post","sem_post() increments the semaphore pointed to by `sem`. If the semaphoreâ€™s value consequently becomes greater than zero, then another thread blocked in a sem_wait call will be woken up and proceed to lock the semaphore."],["sem_timedwait","decrement a semaphore"],["sem_trywait","try to decrement a semaphore"],["send",""],["sendto",""],["set_priority","Determine the priority of the current thread"],["setsockopt",""],["shutdown_socket","shut down part of a full-duplex connection"],["socket",""],["spawn","spawn a new thread"],["spawn2","spawn a new thread with user-specified stack size"],["unlink","delete the file it refers to `name`"],["usleep","suspend execution for microsecond intervals"],["wakeup_task","Wakeup task with the thread id `tid`"],["write","write to a file descriptor"],["yield_now","yield the processor"]],"mod":[["errno",""],["tcplistener","`tcplistener` provide an interface to establish tcp socket server."],["tcpstream","`tcpstream` provide an interface to establish tcp socket client."]],"struct":[["Handle","A handle, identifying a socket"],["Ipv4Address","A four-octet IPv4 address."],["Ipv6Address","A sixteen-octet IPv6 address."],["Priority","Priority of a thread"],["addrinfo",""],["in6_addr",""],["in_addr",""],["ip_mreq",""],["ipv6_mreq",""],["linger",""],["pollfd",""],["sockaddr",""],["sockaddr_in",""],["sockaddr_in6",""],["sockaddr_storage",""],["timespec","`timespec` is used by `clock_gettime` to retrieve the current time"],["timeval",""]],"type":[["Tid","A thread handle type"],["in_addr_t",""],["in_port_t",""],["nfds_t",""],["sa_family_t",""],["socklen_t",""],["suseconds_t",""],["time_t",""]]};